// Om jaavax.tv.xlet.Xlet verkort te schrijven importeren we javax.tv.xlet.*

import javax.tv.xlet.*;
import org.havi.ui.*;

public class MijnEersteXlet implements Xlet {
  // Variabele om de actuele Xlet-context in te bewaren.
  private XletContext actueleXletContext;
  
// Initialiseren van de benodigde resources en variabelen:
  public void initXlet(XletContext context)
    {
    this.actueleXletContext = context;
    }
 
 // Starten van de Xlet:
  public void startXlet() throws XletStateChangeException
    {
    // Communicatie (in & output user;
    }
    
  // Methode voor de pause toestand
  public void pauseXlet()
    {
    // vrijgeven van niet nodige resources
    }
  
  // Einde van Xlet.
  public void destroy Xlet(boolean unconditional) throws XletStateChangeException
    {
    if(unconditional) {
    // System.out.println geeft debug in weer voor emulatoren.
      System.out.println("De Xlet moet beeindigt worden.");
    }
    else {
    System.out.println("De mogelijkheid bestaat door het werpen van een exceptie de Xlet in leven te houden.");
    throw new XletStateChangeException("Laat me leven!");
    }
    }
    
    HScene scene;
    
    // Het template maken
    HSceneTemplate sceneTemplate = new HSceneTemplate();
    
    // Grootte en positie ingeven
    sceneTemplate.setPreference(org.havi.ui.HSceneTemplate.SCENE_SCREEN_DIMENSION, new HScreenDimension(1.0f, 1.0f), prg.havi.ui.HSceneTemplate.REQUIRED);
    
    sceneTemplate.setPreference(org.havi.ui.HSceneTemplate.SceneTemplate.SCENE_SCREEN_LOCATION, new HScreenPoint90.0f, 0.0f), org.havi.ui.HSceneTemplate.REQUIRED)
    
    // Een instantie van een Scene vragen aan de factory
    scene = HSceneFactory.getInstance().getBestScene(sceneTemplate);
    
    // Scene zichtbaar maken
    scene.validate(); scene.setVisible(true);
}
